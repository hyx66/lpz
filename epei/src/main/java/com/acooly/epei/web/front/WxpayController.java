package com.acooly.epei.web.front;import java.io.BufferedReader;import java.io.IOException;import java.math.BigDecimal;import java.text.DecimalFormat;import java.text.SimpleDateFormat;import java.util.*;import javax.servlet.http.HttpServletRequest;import javax.servlet.http.HttpServletResponse;import com.acooly.core.utils.net.HttpResult;import com.acooly.core.utils.net.Https;import org.dom4j.Document;import org.dom4j.DocumentException;import org.dom4j.DocumentHelper;import org.dom4j.Element;import org.slf4j.Logger;import org.slf4j.LoggerFactory;import org.springframework.beans.factory.annotation.Autowired;import org.springframework.stereotype.Controller;import org.springframework.transaction.annotation.Transactional;import org.springframework.ui.Model;import org.springframework.web.bind.annotation.*;import org.springframework.web.servlet.mvc.support.RedirectAttributes;import com.acooly.epei.domain.Customer;import com.acooly.epei.domain.CustomerAcct;import com.acooly.epei.domain.CustomerAcctRecords;import com.acooly.epei.domain.CustomerPoints;import com.acooly.epei.domain.EnchashmentApply;import com.acooly.epei.domain.OrderOriginalEnum;import com.acooly.epei.domain.WechatPaymentLog;import com.acooly.epei.service.CustomerAcctRecordsService;import com.acooly.epei.service.CustomerAcctService;import com.acooly.epei.service.CustomerPointsRecordsService;import com.acooly.epei.service.CustomerPointsService;import com.acooly.epei.service.CustomerService;import com.acooly.epei.service.EnchashmentApplyService;import com.acooly.epei.service.WechatPaymentLogService;import com.acooly.epei.util.CodeTools;import com.acooly.epei.util.CodeUtils;import com.acooly.epei.util.JaxbUtil;import com.acooly.epei.util.LoginUserUtils;import com.acooly.epei.util.UnifiedOrderResult;import com.acooly.epei.util.UnifiedorderRequest;import com.acooly.epei.util.WxUtils;import com.acooly.epei.util.WxpayConfig;/** * 微信充值 *  * @author Qimity *  */@Controller@RequestMapping(value="wxzf")public class WxpayController {	@Autowired	CustomerAcctService customerAcctService;	@Autowired	CustomerAcctRecordsService customerAcctRecordsService;	@Autowired	CustomerPointsService customerPointsService;	@Autowired	CustomerService customerService;	@Autowired	CustomerPointsRecordsService customerPointsRecordsService;	@Autowired	WechatPaymentLogService  wechatPaymentLogService;	@Autowired	EnchashmentApplyService enchashmentApplyService;		private static final Logger logger = LoggerFactory.getLogger(WxpayController.class);		/**	 * 点击“去充值”按钮后进入这里，这里会查询用户的一些基本信息，然后跳转到前端充值页面	 */	@RequestMapping("recharge")	public String orderConfirm(HttpServletRequest request, HttpServletResponse response, Model model) {		Customer customer = LoginUserUtils.getCustomer();		model.addAttribute("customer",customer);			return "/front/mobile/recharge";	}		/**	 * 点击“去充值”按钮后进入这里，这里会查询用户的一些基本信息，然后跳转到前端充值页面	 */	@RequestMapping("toEnchashment")	public String toEnchashment(Model model) {		Customer customer = LoginUserUtils.getCustomer();		String customerId = customer.getId().toString();		model.addAttribute("enchashmentApplyList", enchashmentApplyService.queryByCustomerId(customer.getId()));		CustomerAcct customerAcct = customerAcctService.getCustomerAcctByCustomerId(customer.getId());		if(customerAcct==null){			model.addAttribute("availableAmount", "0");		}else{			DecimalFormat decimalFormat=new DecimalFormat("0.00");//构造方法的字符格式这里如果小数不足2位,会以0补足。			String availableAmount = decimalFormat.format(Float.parseFloat(CodeTools.dncode(customerAcct.getAvailableAmount(),customerId)));//format 返回的是字符串			model.addAttribute("availableAmount", availableAmount);		}		model.addAttribute("customer",customer);			return "/front/mobile/enchashment";	}		@RequestMapping("doEnchashment")	public String doEnchashment(RedirectAttributes redirectAttributes, EnchashmentApply enchashmentApply) {		Customer customer = LoginUserUtils.getCustomer();		String message = "申请提交成功！";		for(EnchashmentApply e:enchashmentApplyService.queryByCustomerId(customer.getId())){			if(e.getStatus()==1){				message = "只能同时提交一个申请";				redirectAttributes.addFlashAttribute("message", message);				return "redirect:/wxzf/toEnchashment.html";			}		}		CustomerAcct customerAcct = customerAcctService.getCustomerAcctByCustomerId(customer.getId());		int c = new BigDecimal(CodeTools.dncode(customerAcct.getAvailableAmount(), customer.getId().toString())).compareTo(new BigDecimal(enchashmentApply.getAmount().toString()));		if(c!=-1){			enchashmentApply.setCustomerId(customer.getId());			enchashmentApply.setCustomerUserName(customer.getUserName());			enchashmentApply.setStatus(1);			enchashmentApply.setApplyNo(CodeUtils.getOrderNo(OrderOriginalEnum.getByCode("WECHAT")));			enchashmentApply.setOpenId(customer.getOpenid());			enchashmentApplyService.save(enchashmentApply);		}else{			message = "申请金额不能大于可用金额！";		}		redirectAttributes.addFlashAttribute("message", message);		return "redirect:/wxzf/toEnchashment.html";	}	/**	 * 微信充值支付     */	@RequestMapping(value = "pay", method = RequestMethod.POST)	public String pay(HttpServletRequest request, Model model) throws Exception{		String rechargeAmount = request.getParameter("rechargeAmount");		model.addAttribute("customer", LoginUserUtils.getCustomer());		model.addAttribute("balance", request.getParameter("balance"));		model.addAttribute("points", request.getParameter("points"));		CustomerAcct customerAcct = customerAcctService.getCustomerAcctByCustomerId(LoginUserUtils.getCusId());		if(customerAcct!=null){			if(customerAcct.getStatus()==0){				insertAndPay(request,model, rechargeAmount);			}else{				System.out.println("自动执行！");				model.addAttribute("isDisable", "您的账户已经被禁用，请与相关工作人员联系。");			}		}else{			insertAndPay(request,model, rechargeAmount);		}		return "/front/mobile/recharge";	}	/**	 * 生成页面调用微信支付接口的JS需要用到的参数	 */	private void insertAndPay(HttpServletRequest request, Model model, String rechargeAmount) throws Exception {		String appId = WxpayConfig.APPID;		String body = "会员充值:"+rechargeAmount+"元";		String mch_id = WxpayConfig.MCHI_ID;		String notify_url = WxpayConfig.RECHARGE_NOTIFY_URL;		String openid = LoginUserUtils.getCustomer().getOpenid();		String out_trade_no = CodeUtils.getOrderNo(OrderOriginalEnum.getByCode("WECHAT"));		//需要乘以100转换为分		int i = (int)(Float.parseFloat(rechargeAmount)*100);		String total_fee = i+"";		String trade_type = "JSAPI";		String key = WxpayConfig.PATERNER_KEY;		String nonce_str = WxUtils.randomStr();		String timeStamp1 = new Date().getTime() + "";		UnifiedorderRequest ur = new UnifiedorderRequest();		ur.setAppid(appId);		ur.setBody(body);		ur.setMch_id(mch_id);		ur.setNonce_str(nonce_str);		ur.setNotify_url(notify_url);		ur.setOpenid(openid);		ur.setOut_trade_no(out_trade_no);		ur.setTimeStamp(timeStamp1);		ur.setTotal_fee(total_fee);		ur.setTrade_type(trade_type);		Map<String,Object> map = WxUtils.beanToMap(ur);		String signU = WxUtils.getSign(map, key);		ur.setSign(signU);		String xml = JaxbUtil.convertToXml(ur,"UTF-8");		HttpResult hr = Https.getInstance().post("https://api.mch.weixin.qq.com/pay/unifiedorder", xml);		UnifiedOrderResult ret = JaxbUtil.converyToJavaBean(hr.getBody(), UnifiedOrderResult.class);		if(ret!=null && "SUCCESS".equals(ret.getReturn_code()) && "SUCCESS".equals(ret.getResult_code())){			String package1 = "prepay_id="+ret.getPrepay_id();			String nonceStr = WxUtils.randomStr();			String timestamp = new Date().getTime()+"";			Map<String,Object> paramP = new HashMap<String,Object>();			paramP.put("appId", appId);			paramP.put("nonceStr", nonceStr);			paramP.put("package", package1);			paramP.put("signType", "MD5");			paramP.put("timeStamp", timestamp);			String sign = WxUtils.getSign(paramP, key);			/**********************************创建财务明细记录********************************************/			Customer customer = LoginUserUtils.getCustomer();			String customerId = customer.getId().toString();			CustomerAcctRecords customerAcctRecords = new CustomerAcctRecords();			customerAcctRecords.setCustomerId(customer.getId());			customerAcctRecords.setCustomerMobile(customer.getMobile());			customerAcctRecords.setCustomerName(customer.getName());			customerAcctRecords.setTitle("在线充值");			//数据类型   充值/消费			customerAcctRecords.setDataType(1);			customerAcctRecords.setOutNo(out_trade_no);			//余额			CustomerAcct customerAcct = customerAcctService.getCustomerAcctByCustomerId(customer.getId());			if(customerAcct==null){				customerAcctRecords.setBalance(new BigDecimal("0"));			}else{				customerAcctRecords.setBalance(new BigDecimal(CodeTools.dncode(customerAcct.getBalance(),customerId)));			}			//充值金额			customerAcctRecords.setRechargeAmount(new BigDecimal(rechargeAmount));			//流水号			customerAcctRecords.setRecordsNo(CodeUtils.getOrderNo(OrderOriginalEnum.getByCode("WECHAT")));			//充值渠道  1：在线充值			customerAcctRecords.setRechargeChannle(1);			//充值状态   0：成功/1：失败  这里默认为失败，支付成功后修改状态			customerAcctRecords.setRechargeStatus(2);			//以下数据跟充值没有关联，但由于数据库设置了不能为空，所以这里给它添加一个默认值。			customerAcctRecords.setSpendAmount(new BigDecimal(0));			customerAcctRecords.setSpendType(0);			customerAcctRecords.setSpendStatus(0);			customerAcctRecords.setSpendChannel(0);			customerAcctRecordsService.save(customerAcctRecords);			model.addAttribute("appId",appId);			model.addAttribute("paySign",sign);			model.addAttribute("nonceStr",nonceStr);			model.addAttribute("timestamp",timestamp);			model.addAttribute("wxPackage",package1);//请勿用package作为名称，否则页面会报错。具体原因还未去寻找。			model.addAttribute("signType","MD5");		}			}		/**	 * 充值成功页面跳转	 */	@RequestMapping("paySuccess")	public String paySuccess(HttpServletRequest request, HttpServletResponse response, Model model) {		return "/front/mobile/index";	}		/**	 * 微信支付回调函数	 */	@Transactional	@RequestMapping("notify")	public synchronized void notify(HttpServletRequest request,HttpServletResponse response){		logger.info("***************notify*****************");		StringBuffer xml = new StringBuffer();        String line = null;        try {            BufferedReader reader = request.getReader();            while((line = reader.readLine()) != null) {                xml.append(line);            }        }        catch(Exception e) {            e.printStackTrace();        }        logger.info(xml.toString());		Document document = null;		try {			document = DocumentHelper.parseText(xml.toString());		} catch (DocumentException e) {			e.printStackTrace();		}		Element returnInfo = document.getRootElement();		String resultCode = returnInfo.elementText("result_code");		String returnCode = returnInfo.elementText("return_code");				//以下是支付成功后回调函数处理的业务逻辑部分		if(resultCode.equals("SUCCESS") && returnCode.equals("SUCCESS")){			String outNo = returnInfo.elementText("out_trade_no");			CustomerAcctRecords customerAcctRecords = customerAcctRecordsService.getCustomerAcctRecordsByOutNo(outNo);//这里的outNo为发起微信支付时自动生成的编号，唯一的，没有其他含义，不同于订单在线支付时的订单编号			//生成微信支付日志			try{				WechatPaymentLog wechatPaymentLog = new WechatPaymentLog();				wechatPaymentLog.setTitle("账户微信充值回调记录");				wechatPaymentLog.setDataOne(customerAcctRecords.getOutNo());				wechatPaymentLog.setDataTwo(customerAcctRecords.getRecordsNo());				wechatPaymentLog.setAmount(customerAcctRecords.getRechargeAmount());				wechatPaymentLog.setContent("{customerAcctRecordsId:"+customerAcctRecords.getId()+"}");//暂时只保存账户明细记录的ID，格式为json格式，方便以后添加元素				wechatPaymentLog.setUserId(customerAcctRecords.getCustomerId());				wechatPaymentLog.setUserName(customerService.get(customerAcctRecords.getCustomerId()).getName());				wechatPaymentLog.setUserType(2);				wechatPaymentLogService.save(wechatPaymentLog);			}catch(Exception e){				e.printStackTrace();			}			//微信支付成功在收到返回信息前总共会向服务器发送八次信息，为了避免重复处理需要先判断充值是否已经加入了会员账户			if(customerAcctRecords.getRechargeStatus()==2){				SimpleDateFormat sdf = new SimpleDateFormat("yyyyMMdd");				String dateYmd = sdf.format(new Date());				customerAcctRecords.setDateYmd(dateYmd);				CustomerAcct customerAcct = customerAcctService.getCustomerAcctByCustomerId(customerAcctRecords.getCustomerId());				Customer customer = customerService.findCustomerById(customerAcctRecords.getCustomerId()); 				String customerId = customer.getId().toString();				customerAcctRecords.setRechargeStatus(1);				BigDecimal rechargeAmount = customerAcctRecords.getRechargeAmount();				if(customerAcct==null){					customerAcctRecords.setBalance(rechargeAmount);					customerAcct=new CustomerAcct();					customerAcct.setCustomerId(customerAcctRecords.getCustomerId());					customerAcct.setTotalAmount(CodeTools.encode(rechargeAmount.toString(),customerId));					customerAcct.setBalance(CodeTools.encode(rechargeAmount.toString(),customerId));					customerAcct.setFreezAmount(CodeTools.encode("0",customerId));					customerAcct.setAvailableAmount(CodeTools.encode(rechargeAmount.toString(),customerId));								customerAcctService.save(customerAcct);					customerAcctRecordsService.update(customerAcctRecords);					}else{					customerAcctRecords.setBalance(new BigDecimal(CodeTools.dncode(customerAcct.getBalance(),customerId)).add(rechargeAmount));					BigDecimal newTotalAmount =new BigDecimal(CodeTools.dncode(customerAcct.getTotalAmount(),customerId)).add(rechargeAmount);					customerAcct.setTotalAmount(CodeTools.encode(newTotalAmount.toString(),customerId));					BigDecimal newBalance = new BigDecimal(CodeTools.dncode(customerAcct.getBalance(),customerId)).add(rechargeAmount);					customerAcct.setBalance(CodeTools.encode(newBalance.toString(),customerId));					BigDecimal newAvailableAmount = new BigDecimal(CodeTools.dncode(customerAcct.getAvailableAmount(),customerId)).add(rechargeAmount);					customerAcct.setAvailableAmount(CodeTools.encode(newAvailableAmount.toString(),customerId));					customerAcctService.update(customerAcct);					customerAcctRecordsService.update(customerAcctRecords);				}			}		}		try {			response.getWriter().print(returnCode);		} catch (IOException e) {		}	}		@RequestMapping("acctCenter")	public String acctCenter(HttpServletRequest request, HttpServletResponse response, Model model) {			Customer customer = LoginUserUtils.getCustomer();		String customerId = customer.getId().toString();		CustomerAcct customerAcct = customerAcctService.getCustomerAcctByCustomerId(customer.getId());		CustomerPoints customerPoints = customerPointsService.getCustomerPointByCustomerId(customer.getId());		if(customerAcct==null){			model.addAttribute("availableAmount", "0");		}else{			DecimalFormat decimalFormat=new DecimalFormat("0.00");//构造方法的字符格式这里如果小数不足2位,会以0补足。			String availableAmount = decimalFormat.format(Float.parseFloat(CodeTools.dncode(customerAcct.getAvailableAmount(),customerId)));//format 返回的是字符串			model.addAttribute("availableAmount", availableAmount);		}		if(customerPoints==null){			model.addAttribute("points", "0");		}else{			model.addAttribute("points", CodeTools.dncode(customerPoints.getPoints(),customerId));		}		model.addAttribute("customer",customer);			return "/front/mobile/acctCenter";	}		/**	 * 查看财务明细	 */	@RequestMapping("acctDetails")	public String acctDetails(HttpServletRequest request, Model model){		Customer customer = LoginUserUtils.getCustomer();		CustomerAcct customerAcct = customerAcctService.getCustomerAcctByCustomerId(customer.getId());				if(customerAcct!=null){			String availableAmount = customerAcct.getAvailableAmount();			model.addAttribute("availableAmount", CodeTools.dncode(availableAmount, customer.getId().toString()));		}else{			model.addAttribute("availableAmount", "0.00");		}		List<CustomerAcctRecords> customerAcctRecordsList = new ArrayList<CustomerAcctRecords>();		for(CustomerAcctRecords c : customerAcctRecordsService.queryByCustomerId(customer.getId())){			if(c.getRechargeStatus()==1||c.getSpendStatus()==1){				customerAcctRecordsList.add(c);			}		}		model.addAttribute("customerAcctRecordsList", customerAcctRecordsList);		model.addAttribute("customer", customer);		return "/front/mobile/acctDetails";	}		/**	 * 查看积分明细	 */	@RequestMapping("pointsDetails")	public String pointsDetails(HttpServletRequest request, Model model){		Customer customer = LoginUserUtils.getCustomer();		CustomerPoints customerPoints = customerPointsService.getCustomerPointsByCustomerId(customer.getId());		if(customerPoints!=null){			String points = customerPoints.getPoints();			model.addAttribute("points", CodeTools.dncode(points, customer.getId().toString()));		}else{			model.addAttribute("points", "0");		}		model.addAttribute("customerPointsRecordsList", customerPointsRecordsService.queryByCustomerId(customer.getId()));		model.addAttribute("customer", customer);		return "/front/mobile/pointsDetails";	}	}